import org.yaml.snakeyaml.Yaml
import com.wiredforcode.gradle.spawn.SpawnProcessTask
import com.wiredforcode.gradle.spawn.KillProcessTask

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins' }
        jcenter()
    }
    dependencies {
        classpath 'org.yaml:snakeyaml:1.19'
        classpath 'com.wiredforcode:gradle-spawn-plugin:0.8.1'
    }
}

plugins {
    id 'com.github.michaelruocco.embedded-mysql-plugin' version '2.1.5'
    id 'org.flywaydb.flyway' version '4.2.0'
    id 'com.github.samueltbrown.cucumber' version '0.9'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'com.wiredforcode.spawn'
apply plugin: 'jacoco'

project.ext {
    artifactId = "dropwizard-web-template"
    group = 'com.github.michaelruocco'
    version = '1.0.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile 'io.dropwizard:dropwizard-core:1.2.1'
    compile 'io.dropwizard:dropwizard-jdbi:1.2.1'
    compile 'io.dropwizard:dropwizard-testing:1.2.1'
    compile 'io.dropwizard:dropwizard-views-freemarker:1.2.1'
    compile 'uk.co.deloittedigital.dropwizard:dropwizard-hikaricp:1.0.0'
    compile 'org.jdbi:jdbi:2.78'
    compile 'mysql:mysql-connector-java:6.0.6'
    compile 'com.smoketurner:dropwizard-swagger:1.0.0-1'
    compile 'com.github.michaelruocco:http-client:4.0.4'

    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.8.0'
    testCompile 'info.cukes:cucumber-java:1.2.5'
    testCompile 'info.cukes:cucumber-junit:1.2.5'
    testCompile 'org.yaml:snakeyaml:1.19'
    testCompile 'com.h2database:h2:1.4.196'
    testCompile 'commons-dbcp:commons-dbcp:1.4'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.flywaydb:flyway-core:4.2.0'
}

def getConfigPath() {
    if (project.hasProperty("configPath"))
        return project.property("configPath")
    'config/local-web-template.yml'
}

def getDatabaseConfig() {
    def yaml = new Yaml()
    def config = new File(configPath)
    def yamlConfig = yaml.load(config.newReader())
    yamlConfig.database
}

embeddedMysql {
    def databaseConfig = getDatabaseConfig()
    url = databaseConfig.url
    version = 'v5_6_22'
}

flyway {
    def databaseConfig = getDatabaseConfig()

    user = databaseConfig.user
    password = databaseConfig.password
    url = databaseConfig.url
    driver = databaseConfig.driverClass
}

task setupMysql {
    dependsOn startEmbeddedMysql, flywayMigrate, flywayInfo
    flywayMigrate.mustRunAfter startEmbeddedMysql
    flywayInfo.mustRunAfter flywayMigrate
}

run {
    dependsOn setupMysql
    mainClassName = mainClassName
    if (project.hasProperty('fake.client.id')) {
        environment 'FAKE_CLIENT_ID', project.property('fake.client.id')
    }
    if (project.hasProperty('google.client.id')) {
        environment 'GOOGLE_CLIENT_ID', project.property('google.client.id')
    }
    if (project.hasProperty('google.client.secret')) {
        environment 'GOOGLE_CLIENT_SECRET', project.property('google.client.secret')
    }
    if (project.hasProperty('github.client.id')) {
        environment 'GITHUB_CLIENT_ID', project.property('github.client.id')
    }
    if (project.hasProperty('github.client.secret')) {
        environment 'GITHUB_CLIENT_SECRET', project.property('github.client.secret')
    }
    args 'server', configPath
}

mainClassName = 'uk.co.mruoc.Main'

shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

task startServer(type: SpawnProcessTask) {
    dependsOn shadowJar, setupMysql
    setupMysql.mustRunAfter shadowJar
    command 'java -jar build/libs/' + project.ext.artifactId + '-all.jar server ' + configPath
    ready 'org.eclipse.jetty.server.Server: Started'
}

task stopServer(type: KillProcessTask)

task acceptanceTest(type: JavaExec) {
    dependsOn startServer
    finalizedBy stopServer
    main = "cucumber.api.cli.Main"
    classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.cucumber.output
    args = ['-p', 'pretty',
            '-p', 'json:build/reports/cucumberResults.json',
            '--glue', 'uk.co.mruoc',
            'src/cucumber/resources']
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}